'use strict';

const awsServerlessExpressMiddleware = require('aws-serverless-express/middleware');
const {WebhookClient, Suggestion, Card} = require('dialogflow-fulfillment');
const compression = require('compression');
const bodyParser = require('body-parser');
const cors = require('cors');

let express = require('express');

const router = express.Router();
const app = express();

let dialogflowSession;
let noMatchMessages = [];
let conversacion = [];

let codigoPostal;
let CPtrue = false;
let provincia;
let fase;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function hola(agent) {
    conversacion.push('Intent: ' + agent.intent);

    agent.add('Â¡Hola! Soy Aurora, le intentarÃ© ayudar con todas sus dudas sobre el COVID-19.');
    agent.add('Â¿En quÃ© puedo ayudarle?');
    sugerenciasInicio(agent);
}

function sugerenciasInicio(agent) {
    agent.add(new Suggestion ('Fases'));
    agent.add(new Suggestion ('SÃ­ntomas'));
    agent.add(new Suggestion ('Normativa'));
    agent.add(new Suggestion ('Medidas seguridad'));
    if (agent.intent !== 'A - Hola') {
        agent.add(new Suggestion('No, eso es todo'));
    }
}

function fallback(agent) {
    conversacion.push('Intent: ' + agent.intent);
    const respuestasPosibles = [
        'No he entendido a quÃ© se refiere, Â¿puede repetirlo?',
        'Â¿PodrÃ­a repetir su pregunta, por favor?',
        'Disculpe, no he entendido su peticiÃ³n.',
        'Perdone, no entiendo su pregunta.',
        'Â¿CÃ³mo?  Formule de otra manera su pregunta, por favor.'
    ];
    agent.add(respuestasPosibles[Math.floor(Math.random() * respuestasPosibles.length)]);
}

function gracias(agent) {
    conversacion.push('Intent: ' + agent.intent);
    agent.add('No hay de quÃ©. Â¿Puedo hacer algo mÃ¡s por usted?');
    sugerenciasInicio(agent);
}

function adios(agent) {
    conversacion.push('Intent: ' + agent.intent);
    agent.add('Ha sido un placer ayudarle, Â¡hasta pronto!');

    agent.setContext({'name': 'cptrue', 'lifespan': -1});
    agent.setContext({'name': 'cpfalse', 'lifespan': -1});

    if (codigoPostal) {
        console.log('CP: ' + codigoPostal);
    }
    if (provincia) {
        console.log('Provincia: ', provincia);
    }
    console.log('Session: ' + dialogflowSession, conversacion);
    console.log('No match messages: ', noMatchMessages);
    codigoPostal = '';
    CPtrue = false;
    provincia = '';
    dialogflowSession = '';
    conversacion = [];
    noMatchMessages = [];
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
async function verificarFaseCP() {
    conversacion.push('Function: verificarFaseCP con CP ' + codigoPostal);
    let conex = {'CP': '', 'Conexion': [], 'ConexionInfo': ''};
    if (codigoPostal) {
        let rows;
        try {
            rows = await xlsxFile('chatbot-fulfillment/pueblosLeon.xlsx');
            for (let i in rows) {
                if (rows[i][1] == codigoPostal) {
                    conversacion.push('Function: verificarFaseCP: CP encontrado');
                    municipios.push(rows[i][0]);
                    if (rows[i][2] === 'True') {
                        municipiosFibraU.push(rows[i][0]);
                        conex.Conexion.push('fibra Ã³ptica');
                    } else if (rows[i][3] === 'True') {
                        municipiosFibraR.push(rows[i][0]);
                        conex.Conexion.push('fibra Ã³ptica propia');
                    } else if (rows[i][4] === 'True') {
                        municipiosWIMAX.push(rows[i][0]);
                        conex.Conexion.push('internet por WIMAX');
                    }
                    if (rows[i][5] !== '-') {
                        municipiosInfo.push(rows[i][0]);
                        if (rows[i][5] === 'LEON') {
                            conex.ConexionInfo = 'Se encargaron de la instalaciÃ³n nuestros compaÃ±eros de LeÃ³n.';
                        } else {
                            conex.ConexionInfo = 'Â¡QuÃ© suerte! Instalamos el servicio justo el pasado mes de marzo.';
                        }
                    }
                    conex.CP = rows[i][1];
                }
            }
            if (!conex) {
                conex.Conexion = 'Na de na, sorry bro';
            }
            console.log(municipios);
            console.log(municipiosFibraU);
            console.log(municipiosFibraR);
            console.log(municipiosWIMAX);
            console.log(municipiosInfo);
            console.log(conex);
        } catch(err) {
            console.log('Function: verificarFaseCP: ha ocurrido un problema al leer el excel' + err);
            conversacion.push('Function: verificarFaseCP: ha ocurrido un problema al leer el excel' + err);
        }
    }
    return conex;
}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
async function faseInfo (agent) {
    conversacion.push('Intent: ' + agent.intent);

    if (agent.getContext('cpfalse')) {
        conversacion.push('Context CPfalse: ' + agent.getContext('cpfalse').lifespan);
        if (agent.getContext('cpfalse').lifespan) {
            CPtrue = false;
            provincia = '';
        }
    }
    if (agent.getContext('cptrue')) {
        conversacion.push('Context CPtrue: ' + agent.getContext('cptrue').lifespan);
        if (agent.getContext('cptrue').lifespan) {
            CPtrue = true;
        }
    }

    conversacion.push('CPtrue: ' + CPtrue);
    if (!CPtrue) {
        codigoPostal = agent.parameters.codigoPostal;
        conversacion.push('CP Actualizado: ' + codigoPostal);
    }
    if (codigoPostal && !CPtrue) {
        conversacion.push('ENTRO EN 1');
        try {
            provincia = await verificarFaseCP();
            conversacion.push('Return de verificarFaseCP: ', provincia);
        } catch (err) {
            console.log('Hubo un problema al llamar verificarFaseCP:', err);
            conversacion.push('Hubo un problema al llamar verificarFaseCP:', err);
        }
    } else if (provincia && provincia.fase && CPtrue) {
        conversacion.push('ENTRO EN 2');
        CPtrue = true;
        agent.setContext({'name': 'cptrue', 'lifespan': 10});
        // agent.setContext({'name': 'cpfalse', 'lifespan': -1});
        if (fase === 'fase 1') {
            fase1();
        } else if (fase === 'fase 2') {
            fase2();
        } else if (fase === 'fase 3') {
            fase3();
        }
    } else if (provincia && !provincia.fase && CPtrue) { // TODO quiere realizar otra bÃºsqueda?
        conversacion.push('ENTRO EN 3');
        agent.add('Lo siento, no encuentro informaciÃ³n sobre la fase correspondiente a la provincia ' + provincia + '.');
        agent.add('No dude en visitar la pÃ¡gina web de su servicio de salud.');
        // agent.add('Si quiere buscar la conexiÃ³n que ofrecemos en otro municipio, escriba el CP.');
        agent.add('Â¿Le puedo ayudar en algo mÃ¡s?');
        agent.add(new Suggestion('SÃ­ntomas'));
        agent.add(new Suggestion('Normativa'));
        agent.add(new Suggestion('No, eso es todo'));
    } else if (!provincia) {
        conversacion.push('ENTRO EN 4');
        agent.add('Lo siento, no encuentro informaciÃ³n sobre la fase correspondiente a la provincia ' + provincia + '.');
        agent.add('No dude en visitar la pÃ¡gina web de su servicio de salud.');
        agent.add('Â¿Le puedo ayudar con algo mÃ¡s?');
        agent.add(new Suggestion('SÃ­ntomas'));
        agent.add(new Suggestion('Normativa'));
        agent.add(new Suggestion('No, eso es todo'));
    }
}
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function card (agent) {
    agent.add(new Card({
            title: 'TÃ­tulo link',
            buttonText: 'TÃ­tulo link',
            buttonUrl: 'https://www.google.com'
        })
    );
    agent.add('Blablabla.');
    sugerenciasInicio(agent);
}

function setCPtrue (fakeCPtrue) {CPtrue = fakeCPtrue;}
function setCodigoPostal (fakeCodigoPostal) {codigoPostal = fakeCodigoPostal;}
function setProvincia (fakeProvincia) {provincia = fakeProvincia;}
function setFase (fakeFase) {fase = fakeFase;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

router.use(compression());
router.use(cors());
router.use(bodyParser.json());
router.use(bodyParser.urlencoded({extended: true}));
router.use(awsServerlessExpressMiddleware.eventContext());

router.post('/', (request, response) => {
    const agent = new WebhookClient({request, response});
    console.log('Dialogflow Request headers : ' + JSON.stringify(request.headers));
    console.log('Dialogflow Request body : ' + JSON.stringify(request.body));
    dialogflowSession = request.body.session;
    if (request.body.queryResult.action === 'input.unknown') {
        noMatchMessages.push(request.body.queryResult.queryText);
    }

    if (request.body.queryResult.queryText === 'Hola Max, conozco a tu mamÃ¡') {
        agent.add('Â¡Ay, quÃ© guay!ðŸ’ƒ Â¿SabÃ­as que le encantan los Lacasitos? PodÃ­as regalarle unos poquitos ðŸ™„ðŸ¤­');
        agent.add('Â¡Ha sido un placer! Pero tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, Â¿sabes cÃ³mo naciste?') {
        agent.add('Pues me han contado la movida de la cigÃ¼eÃ±a pero en realidad sÃ© que fue porque mi mamÃ¡ se aburrÃ­a mucho durante la cuarentena del Covid ðŸ”ž');
        agent.add('Â¡Ha sido un placer! Pero tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy Marquitu') {
        agent.add('Ay, mi mamÃ¡ me dijo que si pasabas a verme te diera este recado:');
        agent.add('Te quiero mucho porque eres mi hermanito y te quiero mucho ðŸ¥°');
        agent.add('Â¡Ha sido un placer, tÃ­o! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy LÃº Yatusabeh') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti!');
        agent.add('Yo sÃ© que no te lo dice mucho pero... TE QUIERE UN MONTÃ“N ðŸ’œðŸ’œðŸ’œ');
        agent.add('Â¡Ha sido un placer Lu! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy Mar Carmena Blanco') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti!');
        agent.add('Yo sÃ© que no te lo dice mucho pero... TE QUIERE UN MONTÃ“N ðŸ’œðŸ’œðŸ’œ');
        agent.add('Â¡Ha sido un placer Babu! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy clara.yeah.123') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti!');
        agent.add('Yo sÃ© que no te lo dice mucho pero... TE QUIERE UN MONTÃ“N ðŸ’œðŸ’œðŸ’œ');
        agent.add('Â¡Ha sido un placer Clara! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy Marinita') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti!');
        agent.add('TÃº tranqui que no se le olvida el viaje a Marruecos que tenÃ©is pendiente ðŸ’œ');
        agent.add('Â¡Ha sido un placer Marinita! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy Purpurino') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti! Me pidiÃ³ que si te pasabas a verme te diera un recado:');
        agent.add('Ã‘am Ã±am');
        agent.add('Â¡Ha sido un placer ðŸ§€! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy el bestjugadorderugbyever') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti! ðŸ˜„');
        agent.add('Â¿Sabes quÃ© hago cuando nadie habla conmigo y me aburro?');
        agent.add(new Card({
                title: 'Â¡Veo este vÃ­deo en bucle!',
                buttonText: 'Â¡Veo este vÃ­deo en bucle!',
                buttonUrl: 'https://youtu.be/9A4oKO99NbE'
            })
        );
        agent.add('Â¡Ha sido un placer Carva! Ahora tengo que volver al curro...');
    }
    if (request.body.queryResult.queryText === 'Hola Max, soy el tolay que tenÃ­a que haber empezado a subir vÃ­deos a youtube hace media vida') {
        agent.add('Â¡Ay, mi mamÃ¡ me ha hablado mucho de ti! ðŸ˜„');
        agent.add('Â¿Sabes quÃ© hago cuando nadie habla conmigo y me aburro?');
        agent.add(new Card({
                title: 'Veo los vÃ­deos de este canal en bucle',
                buttonText: 'Veo los vÃ­deos de este canal en bucle',
                buttonUrl: 'https://www.youtube.com/channel/UCjuhW3D1QYmws1En3Z852cQ'
            })
        );
        agent.add('Te lo recomiendo, los temas estÃ¡n to guapos.');
        agent.add('Â¡Agur Iker! Tengo que volver al curro...');
    }

    let intentMap = new Map();
    intentMap.set('A - Hola', hola);
    intentMap.set('Fallback', fallback);
    intentMap.set('A - Gracias', gracias);
    intentMap.set('A - Adios', adios);

    agent.handleRequest(intentMap);
});

app.use('/', router);

module.exports = app;
module.exports.hola = hola;
module.exports.adios = adios;

module.exports.setCPtrue = setCPtrue;
module.exports.setCodigoPostal = setCodigoPostal;
module.exports.setProvincia = setProvincia;
module.exports.setFase = setFase;
